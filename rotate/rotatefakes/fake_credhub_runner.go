// Code generated by counterfeiter. DO NOT EDIT.
package rotatefakes

import (
	"sync"

	"github.com/vmware-tanzu/rotate-instance-identity-certificates/credhub"
	"github.com/vmware-tanzu/rotate-instance-identity-certificates/rotate"
)

type FakeCredhubRunner struct {
	DeleteStub        func(string) error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		arg1 string
	}
	deleteReturns struct {
		result1 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 error
	}
	GetCertificateStub        func(string) (*credhub.Certificate, error)
	getCertificateMutex       sync.RWMutex
	getCertificateArgsForCall []struct {
		arg1 string
	}
	getCertificateReturns struct {
		result1 *credhub.Certificate
		result2 error
	}
	getCertificateReturnsOnCall map[int]struct {
		result1 *credhub.Certificate
		result2 error
	}
	ImportStub        func(string) error
	importMutex       sync.RWMutex
	importArgsForCall []struct {
		arg1 string
	}
	importReturns struct {
		result1 error
	}
	importReturnsOnCall map[int]struct {
		result1 error
	}
	ImportCertificatesStub        func([]credhub.Certificate) error
	importCertificatesMutex       sync.RWMutex
	importCertificatesArgsForCall []struct {
		arg1 []credhub.Certificate
	}
	importCertificatesReturns struct {
		result1 error
	}
	importCertificatesReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCredhubRunner) Delete(arg1 string) error {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.DeleteStub
	fakeReturns := fake.deleteReturns
	fake.recordInvocation("Delete", []interface{}{arg1})
	fake.deleteMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCredhubRunner) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeCredhubRunner) DeleteCalls(stub func(string) error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = stub
}

func (fake *FakeCredhubRunner) DeleteArgsForCall(i int) string {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	argsForCall := fake.deleteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCredhubRunner) DeleteReturns(result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCredhubRunner) DeleteReturnsOnCall(i int, result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCredhubRunner) GetCertificate(arg1 string) (*credhub.Certificate, error) {
	fake.getCertificateMutex.Lock()
	ret, specificReturn := fake.getCertificateReturnsOnCall[len(fake.getCertificateArgsForCall)]
	fake.getCertificateArgsForCall = append(fake.getCertificateArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetCertificateStub
	fakeReturns := fake.getCertificateReturns
	fake.recordInvocation("GetCertificate", []interface{}{arg1})
	fake.getCertificateMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCredhubRunner) GetCertificateCallCount() int {
	fake.getCertificateMutex.RLock()
	defer fake.getCertificateMutex.RUnlock()
	return len(fake.getCertificateArgsForCall)
}

func (fake *FakeCredhubRunner) GetCertificateCalls(stub func(string) (*credhub.Certificate, error)) {
	fake.getCertificateMutex.Lock()
	defer fake.getCertificateMutex.Unlock()
	fake.GetCertificateStub = stub
}

func (fake *FakeCredhubRunner) GetCertificateArgsForCall(i int) string {
	fake.getCertificateMutex.RLock()
	defer fake.getCertificateMutex.RUnlock()
	argsForCall := fake.getCertificateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCredhubRunner) GetCertificateReturns(result1 *credhub.Certificate, result2 error) {
	fake.getCertificateMutex.Lock()
	defer fake.getCertificateMutex.Unlock()
	fake.GetCertificateStub = nil
	fake.getCertificateReturns = struct {
		result1 *credhub.Certificate
		result2 error
	}{result1, result2}
}

func (fake *FakeCredhubRunner) GetCertificateReturnsOnCall(i int, result1 *credhub.Certificate, result2 error) {
	fake.getCertificateMutex.Lock()
	defer fake.getCertificateMutex.Unlock()
	fake.GetCertificateStub = nil
	if fake.getCertificateReturnsOnCall == nil {
		fake.getCertificateReturnsOnCall = make(map[int]struct {
			result1 *credhub.Certificate
			result2 error
		})
	}
	fake.getCertificateReturnsOnCall[i] = struct {
		result1 *credhub.Certificate
		result2 error
	}{result1, result2}
}

func (fake *FakeCredhubRunner) Import(arg1 string) error {
	fake.importMutex.Lock()
	ret, specificReturn := fake.importReturnsOnCall[len(fake.importArgsForCall)]
	fake.importArgsForCall = append(fake.importArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ImportStub
	fakeReturns := fake.importReturns
	fake.recordInvocation("Import", []interface{}{arg1})
	fake.importMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCredhubRunner) ImportCallCount() int {
	fake.importMutex.RLock()
	defer fake.importMutex.RUnlock()
	return len(fake.importArgsForCall)
}

func (fake *FakeCredhubRunner) ImportCalls(stub func(string) error) {
	fake.importMutex.Lock()
	defer fake.importMutex.Unlock()
	fake.ImportStub = stub
}

func (fake *FakeCredhubRunner) ImportArgsForCall(i int) string {
	fake.importMutex.RLock()
	defer fake.importMutex.RUnlock()
	argsForCall := fake.importArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCredhubRunner) ImportReturns(result1 error) {
	fake.importMutex.Lock()
	defer fake.importMutex.Unlock()
	fake.ImportStub = nil
	fake.importReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCredhubRunner) ImportReturnsOnCall(i int, result1 error) {
	fake.importMutex.Lock()
	defer fake.importMutex.Unlock()
	fake.ImportStub = nil
	if fake.importReturnsOnCall == nil {
		fake.importReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.importReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCredhubRunner) ImportCertificates(arg1 []credhub.Certificate) error {
	var arg1Copy []credhub.Certificate
	if arg1 != nil {
		arg1Copy = make([]credhub.Certificate, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.importCertificatesMutex.Lock()
	ret, specificReturn := fake.importCertificatesReturnsOnCall[len(fake.importCertificatesArgsForCall)]
	fake.importCertificatesArgsForCall = append(fake.importCertificatesArgsForCall, struct {
		arg1 []credhub.Certificate
	}{arg1Copy})
	stub := fake.ImportCertificatesStub
	fakeReturns := fake.importCertificatesReturns
	fake.recordInvocation("ImportCertificates", []interface{}{arg1Copy})
	fake.importCertificatesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCredhubRunner) ImportCertificatesCallCount() int {
	fake.importCertificatesMutex.RLock()
	defer fake.importCertificatesMutex.RUnlock()
	return len(fake.importCertificatesArgsForCall)
}

func (fake *FakeCredhubRunner) ImportCertificatesCalls(stub func([]credhub.Certificate) error) {
	fake.importCertificatesMutex.Lock()
	defer fake.importCertificatesMutex.Unlock()
	fake.ImportCertificatesStub = stub
}

func (fake *FakeCredhubRunner) ImportCertificatesArgsForCall(i int) []credhub.Certificate {
	fake.importCertificatesMutex.RLock()
	defer fake.importCertificatesMutex.RUnlock()
	argsForCall := fake.importCertificatesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCredhubRunner) ImportCertificatesReturns(result1 error) {
	fake.importCertificatesMutex.Lock()
	defer fake.importCertificatesMutex.Unlock()
	fake.ImportCertificatesStub = nil
	fake.importCertificatesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCredhubRunner) ImportCertificatesReturnsOnCall(i int, result1 error) {
	fake.importCertificatesMutex.Lock()
	defer fake.importCertificatesMutex.Unlock()
	fake.ImportCertificatesStub = nil
	if fake.importCertificatesReturnsOnCall == nil {
		fake.importCertificatesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.importCertificatesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCredhubRunner) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.getCertificateMutex.RLock()
	defer fake.getCertificateMutex.RUnlock()
	fake.importMutex.RLock()
	defer fake.importMutex.RUnlock()
	fake.importCertificatesMutex.RLock()
	defer fake.importCertificatesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCredhubRunner) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ rotate.CredhubRunner = new(FakeCredhubRunner)
