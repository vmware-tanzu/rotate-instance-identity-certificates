// Code generated by counterfeiter. DO NOT EDIT.
package rotatefakes

import (
	"sync"

	"github.com/vmware-tanzu/rotate-instance-identity-certificates/manifest"
	"github.com/vmware-tanzu/rotate-instance-identity-certificates/rotate"
)

type FakeManifestLoader struct {
	GetAllManifestsWithDiegoCellsStub        func() ([]manifest.Manifest, error)
	getAllManifestsWithDiegoCellsMutex       sync.RWMutex
	getAllManifestsWithDiegoCellsArgsForCall []struct {
	}
	getAllManifestsWithDiegoCellsReturns struct {
		result1 []manifest.Manifest
		result2 error
	}
	getAllManifestsWithDiegoCellsReturnsOnCall map[int]struct {
		result1 []manifest.Manifest
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeManifestLoader) GetAllManifestsWithDiegoCells() ([]manifest.Manifest, error) {
	fake.getAllManifestsWithDiegoCellsMutex.Lock()
	ret, specificReturn := fake.getAllManifestsWithDiegoCellsReturnsOnCall[len(fake.getAllManifestsWithDiegoCellsArgsForCall)]
	fake.getAllManifestsWithDiegoCellsArgsForCall = append(fake.getAllManifestsWithDiegoCellsArgsForCall, struct {
	}{})
	stub := fake.GetAllManifestsWithDiegoCellsStub
	fakeReturns := fake.getAllManifestsWithDiegoCellsReturns
	fake.recordInvocation("GetAllManifestsWithDiegoCells", []interface{}{})
	fake.getAllManifestsWithDiegoCellsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeManifestLoader) GetAllManifestsWithDiegoCellsCallCount() int {
	fake.getAllManifestsWithDiegoCellsMutex.RLock()
	defer fake.getAllManifestsWithDiegoCellsMutex.RUnlock()
	return len(fake.getAllManifestsWithDiegoCellsArgsForCall)
}

func (fake *FakeManifestLoader) GetAllManifestsWithDiegoCellsCalls(stub func() ([]manifest.Manifest, error)) {
	fake.getAllManifestsWithDiegoCellsMutex.Lock()
	defer fake.getAllManifestsWithDiegoCellsMutex.Unlock()
	fake.GetAllManifestsWithDiegoCellsStub = stub
}

func (fake *FakeManifestLoader) GetAllManifestsWithDiegoCellsReturns(result1 []manifest.Manifest, result2 error) {
	fake.getAllManifestsWithDiegoCellsMutex.Lock()
	defer fake.getAllManifestsWithDiegoCellsMutex.Unlock()
	fake.GetAllManifestsWithDiegoCellsStub = nil
	fake.getAllManifestsWithDiegoCellsReturns = struct {
		result1 []manifest.Manifest
		result2 error
	}{result1, result2}
}

func (fake *FakeManifestLoader) GetAllManifestsWithDiegoCellsReturnsOnCall(i int, result1 []manifest.Manifest, result2 error) {
	fake.getAllManifestsWithDiegoCellsMutex.Lock()
	defer fake.getAllManifestsWithDiegoCellsMutex.Unlock()
	fake.GetAllManifestsWithDiegoCellsStub = nil
	if fake.getAllManifestsWithDiegoCellsReturnsOnCall == nil {
		fake.getAllManifestsWithDiegoCellsReturnsOnCall = make(map[int]struct {
			result1 []manifest.Manifest
			result2 error
		})
	}
	fake.getAllManifestsWithDiegoCellsReturnsOnCall[i] = struct {
		result1 []manifest.Manifest
		result2 error
	}{result1, result2}
}

func (fake *FakeManifestLoader) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getAllManifestsWithDiegoCellsMutex.RLock()
	defer fake.getAllManifestsWithDiegoCellsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeManifestLoader) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ rotate.ManifestLoader = new(FakeManifestLoader)
