// Code generated by counterfeiter. DO NOT EDIT.
package rotatefakes

import (
	"sync"

	"github.com/vmware-tanzu/rotate-instance-identity-certificates/bosh"
	"github.com/vmware-tanzu/rotate-instance-identity-certificates/rotate"
)

type FakeBoshRunner struct {
	DeployStub        func(string, string) error
	deployMutex       sync.RWMutex
	deployArgsForCall []struct {
		arg1 string
		arg2 string
	}
	deployReturns struct {
		result1 error
	}
	deployReturnsOnCall map[int]struct {
		result1 error
	}
	DeployWithFlagsStub        func(string, string, ...string) error
	deployWithFlagsMutex       sync.RWMutex
	deployWithFlagsArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 []string
	}
	deployWithFlagsReturns struct {
		result1 error
	}
	deployWithFlagsReturnsOnCall map[int]struct {
		result1 error
	}
	GetDeploymentVMsStub        func(string) ([]bosh.VM, error)
	getDeploymentVMsMutex       sync.RWMutex
	getDeploymentVMsArgsForCall []struct {
		arg1 string
	}
	getDeploymentVMsReturns struct {
		result1 []bosh.VM
		result2 error
	}
	getDeploymentVMsReturnsOnCall map[int]struct {
		result1 []bosh.VM
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBoshRunner) Deploy(arg1 string, arg2 string) error {
	fake.deployMutex.Lock()
	ret, specificReturn := fake.deployReturnsOnCall[len(fake.deployArgsForCall)]
	fake.deployArgsForCall = append(fake.deployArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.DeployStub
	fakeReturns := fake.deployReturns
	fake.recordInvocation("Deploy", []interface{}{arg1, arg2})
	fake.deployMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeBoshRunner) DeployCallCount() int {
	fake.deployMutex.RLock()
	defer fake.deployMutex.RUnlock()
	return len(fake.deployArgsForCall)
}

func (fake *FakeBoshRunner) DeployCalls(stub func(string, string) error) {
	fake.deployMutex.Lock()
	defer fake.deployMutex.Unlock()
	fake.DeployStub = stub
}

func (fake *FakeBoshRunner) DeployArgsForCall(i int) (string, string) {
	fake.deployMutex.RLock()
	defer fake.deployMutex.RUnlock()
	argsForCall := fake.deployArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeBoshRunner) DeployReturns(result1 error) {
	fake.deployMutex.Lock()
	defer fake.deployMutex.Unlock()
	fake.DeployStub = nil
	fake.deployReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBoshRunner) DeployReturnsOnCall(i int, result1 error) {
	fake.deployMutex.Lock()
	defer fake.deployMutex.Unlock()
	fake.DeployStub = nil
	if fake.deployReturnsOnCall == nil {
		fake.deployReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deployReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeBoshRunner) DeployWithFlags(arg1 string, arg2 string, arg3 ...string) error {
	fake.deployWithFlagsMutex.Lock()
	ret, specificReturn := fake.deployWithFlagsReturnsOnCall[len(fake.deployWithFlagsArgsForCall)]
	fake.deployWithFlagsArgsForCall = append(fake.deployWithFlagsArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 []string
	}{arg1, arg2, arg3})
	stub := fake.DeployWithFlagsStub
	fakeReturns := fake.deployWithFlagsReturns
	fake.recordInvocation("DeployWithFlags", []interface{}{arg1, arg2, arg3})
	fake.deployWithFlagsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeBoshRunner) DeployWithFlagsCallCount() int {
	fake.deployWithFlagsMutex.RLock()
	defer fake.deployWithFlagsMutex.RUnlock()
	return len(fake.deployWithFlagsArgsForCall)
}

func (fake *FakeBoshRunner) DeployWithFlagsCalls(stub func(string, string, ...string) error) {
	fake.deployWithFlagsMutex.Lock()
	defer fake.deployWithFlagsMutex.Unlock()
	fake.DeployWithFlagsStub = stub
}

func (fake *FakeBoshRunner) DeployWithFlagsArgsForCall(i int) (string, string, []string) {
	fake.deployWithFlagsMutex.RLock()
	defer fake.deployWithFlagsMutex.RUnlock()
	argsForCall := fake.deployWithFlagsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeBoshRunner) DeployWithFlagsReturns(result1 error) {
	fake.deployWithFlagsMutex.Lock()
	defer fake.deployWithFlagsMutex.Unlock()
	fake.DeployWithFlagsStub = nil
	fake.deployWithFlagsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBoshRunner) DeployWithFlagsReturnsOnCall(i int, result1 error) {
	fake.deployWithFlagsMutex.Lock()
	defer fake.deployWithFlagsMutex.Unlock()
	fake.DeployWithFlagsStub = nil
	if fake.deployWithFlagsReturnsOnCall == nil {
		fake.deployWithFlagsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deployWithFlagsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeBoshRunner) GetDeploymentVMs(arg1 string) ([]bosh.VM, error) {
	fake.getDeploymentVMsMutex.Lock()
	ret, specificReturn := fake.getDeploymentVMsReturnsOnCall[len(fake.getDeploymentVMsArgsForCall)]
	fake.getDeploymentVMsArgsForCall = append(fake.getDeploymentVMsArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetDeploymentVMsStub
	fakeReturns := fake.getDeploymentVMsReturns
	fake.recordInvocation("GetDeploymentVMs", []interface{}{arg1})
	fake.getDeploymentVMsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeBoshRunner) GetDeploymentVMsCallCount() int {
	fake.getDeploymentVMsMutex.RLock()
	defer fake.getDeploymentVMsMutex.RUnlock()
	return len(fake.getDeploymentVMsArgsForCall)
}

func (fake *FakeBoshRunner) GetDeploymentVMsCalls(stub func(string) ([]bosh.VM, error)) {
	fake.getDeploymentVMsMutex.Lock()
	defer fake.getDeploymentVMsMutex.Unlock()
	fake.GetDeploymentVMsStub = stub
}

func (fake *FakeBoshRunner) GetDeploymentVMsArgsForCall(i int) string {
	fake.getDeploymentVMsMutex.RLock()
	defer fake.getDeploymentVMsMutex.RUnlock()
	argsForCall := fake.getDeploymentVMsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeBoshRunner) GetDeploymentVMsReturns(result1 []bosh.VM, result2 error) {
	fake.getDeploymentVMsMutex.Lock()
	defer fake.getDeploymentVMsMutex.Unlock()
	fake.GetDeploymentVMsStub = nil
	fake.getDeploymentVMsReturns = struct {
		result1 []bosh.VM
		result2 error
	}{result1, result2}
}

func (fake *FakeBoshRunner) GetDeploymentVMsReturnsOnCall(i int, result1 []bosh.VM, result2 error) {
	fake.getDeploymentVMsMutex.Lock()
	defer fake.getDeploymentVMsMutex.Unlock()
	fake.GetDeploymentVMsStub = nil
	if fake.getDeploymentVMsReturnsOnCall == nil {
		fake.getDeploymentVMsReturnsOnCall = make(map[int]struct {
			result1 []bosh.VM
			result2 error
		})
	}
	fake.getDeploymentVMsReturnsOnCall[i] = struct {
		result1 []bosh.VM
		result2 error
	}{result1, result2}
}

func (fake *FakeBoshRunner) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deployMutex.RLock()
	defer fake.deployMutex.RUnlock()
	fake.deployWithFlagsMutex.RLock()
	defer fake.deployWithFlagsMutex.RUnlock()
	fake.getDeploymentVMsMutex.RLock()
	defer fake.getDeploymentVMsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBoshRunner) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ rotate.BoshRunner = new(FakeBoshRunner)
